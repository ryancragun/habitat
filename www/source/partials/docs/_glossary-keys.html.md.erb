# <a name="glossary-keys" id="glossary-keys" data-magellan-target="glossary-keys">Keys</a>

Habitat has strong cryptography built into both Habitat Builder and the Supervisor. This means there are several different kinds of keys.

## Origin Key Pairs

Every package in Habitat belongs to an [origin](/docs/glossary/#glossary-packages) and is cryptographically signed with that origin's private key.

Origin key cryptography is asymmetric: it has a public key that you can distribute freely, and a private key that you should keep safe.

Supervisors use the public origin key to verify the integrity of a downloaded Habitat before running it.
By default, supervisors only run packages for which they have the public key, and will not run a package without first having its public key.
You can provide a public key to the Supervisors by pointing them to a depot that has it, or by putting the key on disk outside of Habitat.

## User and Service Group Keys

User and service group keys are used to set up trust relationships between these two entities. Service groups can be set up to reject communication (e.g. applying new configuration via `hab config apply`) from untrusted users.

By default, service groups will trust *any* communication, so for a production deployment of Habitat, setting up these relationships is essential.

User and service group keys also utilize asymmetric cryptography. To apply configuration changes to service groups when running in this mode, a user uses their own private key to encrypt configuration information for a service group, using that service group's public key. The service group then uses its private key to decrypt the configuration information, and the user's public key to verify.

## Ring Encryption Key

A Supervisor ring can be optionally set up to encrypt *all* communication across the network. This requires the use of a symmetric pre-shared key. Any Supervisor joining the ring that does not present this key will be rejected.
